// Generated from ../uvl/UVLJavaScript.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,63,602,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,373,8,31,1,31,
1,31,3,31,377,8,31,1,31,3,31,380,8,31,3,31,382,8,31,1,31,1,31,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,
37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
445,8,38,3,38,447,8,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,
47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
1,54,3,54,489,8,54,1,54,5,54,492,8,54,10,54,12,54,495,9,54,1,54,1,54,4,54,
499,8,54,11,54,12,54,500,1,55,1,55,3,55,505,8,55,1,55,1,55,5,55,509,8,55,
10,55,12,55,512,9,55,3,55,514,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
56,1,56,3,56,525,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,
1,59,1,59,4,59,539,8,59,11,59,12,59,540,1,59,1,59,1,60,1,60,1,60,1,60,1,
60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,5,60,559,8,60,10,60,12,60,
562,9,60,1,61,1,61,4,61,566,8,61,11,61,12,61,567,1,61,1,61,1,62,1,62,3,62,
574,8,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,582,8,63,10,63,12,63,585,9,63,
1,63,1,63,5,63,589,8,63,10,63,12,63,592,9,63,1,63,1,63,3,63,596,8,63,1,64,
4,64,599,8,64,11,64,12,64,600,0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,0,129,0,1,0,10,1,
0,48,57,1,0,46,46,1,0,49,57,4,0,10,10,13,13,34,34,46,46,2,0,65,90,97,122,
5,0,35,35,48,57,65,90,95,95,97,122,4,0,37,37,39,39,63,63,92,92,4,0,10,10,
13,13,39,39,46,46,2,0,10,10,12,13,2,0,9,9,32,32,627,0,1,1,0,0,0,0,3,1,0,
0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
0,0,0,1,131,1,0,0,0,3,139,1,0,0,0,5,149,1,0,0,0,7,157,1,0,0,0,9,160,1,0,
0,0,11,169,1,0,0,0,13,181,1,0,0,0,15,192,1,0,0,0,17,204,1,0,0,0,19,208,1,
0,0,0,21,212,1,0,0,0,23,216,1,0,0,0,25,222,1,0,0,0,27,227,1,0,0,0,29,229,
1,0,0,0,31,236,1,0,0,0,33,244,1,0,0,0,35,249,1,0,0,0,37,260,1,0,0,0,39,265,
1,0,0,0,41,283,1,0,0,0,43,303,1,0,0,0,45,322,1,0,0,0,47,341,1,0,0,0,49,344,
1,0,0,0,51,347,1,0,0,0,53,350,1,0,0,0,55,353,1,0,0,0,57,356,1,0,0,0,59,359,
1,0,0,0,61,364,1,0,0,0,63,381,1,0,0,0,65,385,1,0,0,0,67,394,1,0,0,0,69,403,
1,0,0,0,71,406,1,0,0,0,73,418,1,0,0,0,75,427,1,0,0,0,77,437,1,0,0,0,79,450,
1,0,0,0,81,452,1,0,0,0,83,454,1,0,0,0,85,456,1,0,0,0,87,460,1,0,0,0,89,463,
1,0,0,0,91,466,1,0,0,0,93,468,1,0,0,0,95,471,1,0,0,0,97,473,1,0,0,0,99,476,
1,0,0,0,101,479,1,0,0,0,103,481,1,0,0,0,105,483,1,0,0,0,107,485,1,0,0,0,
109,488,1,0,0,0,111,513,1,0,0,0,113,524,1,0,0,0,115,526,1,0,0,0,117,534,
1,0,0,0,119,536,1,0,0,0,121,544,1,0,0,0,123,563,1,0,0,0,125,573,1,0,0,0,
127,595,1,0,0,0,129,598,1,0,0,0,131,132,5,105,0,0,132,133,5,110,0,0,133,
134,5,99,0,0,134,135,5,108,0,0,135,136,5,117,0,0,136,137,5,100,0,0,137,138,
5,101,0,0,138,2,1,0,0,0,139,140,5,110,0,0,140,141,5,97,0,0,141,142,5,109,
0,0,142,143,5,101,0,0,143,144,5,115,0,0,144,145,5,112,0,0,145,146,5,97,0,
0,146,147,5,99,0,0,147,148,5,101,0,0,148,4,1,0,0,0,149,150,5,105,0,0,150,
151,5,109,0,0,151,152,5,112,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,
155,5,116,0,0,155,156,5,115,0,0,156,6,1,0,0,0,157,158,5,97,0,0,158,159,5,
115,0,0,159,8,1,0,0,0,160,161,5,102,0,0,161,162,5,101,0,0,162,163,5,97,0,
0,163,164,5,116,0,0,164,165,5,117,0,0,165,166,5,114,0,0,166,167,5,101,0,
0,167,168,5,115,0,0,168,10,1,0,0,0,169,170,5,99,0,0,170,171,5,97,0,0,171,
172,5,114,0,0,172,173,5,100,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,
176,5,97,0,0,176,177,5,108,0,0,177,178,5,105,0,0,178,179,5,116,0,0,179,180,
5,121,0,0,180,12,1,0,0,0,181,182,5,99,0,0,182,183,5,111,0,0,183,184,5,110,
0,0,184,185,5,115,0,0,185,186,5,116,0,0,186,187,5,114,0,0,187,188,5,97,0,
0,188,189,5,105,0,0,189,190,5,110,0,0,190,191,5,116,0,0,191,14,1,0,0,0,192,
193,5,99,0,0,193,194,5,111,0,0,194,195,5,110,0,0,195,196,5,115,0,0,196,197,
5,116,0,0,197,198,5,114,0,0,198,199,5,97,0,0,199,200,5,105,0,0,200,201,5,
110,0,0,201,202,5,116,0,0,202,203,5,115,0,0,203,16,1,0,0,0,204,205,5,115,
0,0,205,206,5,117,0,0,206,207,5,109,0,0,207,18,1,0,0,0,208,209,5,97,0,0,
209,210,5,118,0,0,210,211,5,103,0,0,211,20,1,0,0,0,212,213,5,108,0,0,213,
214,5,101,0,0,214,215,5,110,0,0,215,22,1,0,0,0,216,217,5,102,0,0,217,218,
5,108,0,0,218,219,5,111,0,0,219,220,5,111,0,0,220,221,5,114,0,0,221,24,1,
0,0,0,222,223,5,99,0,0,223,224,5,101,0,0,224,225,5,105,0,0,225,226,5,108,
0,0,226,26,1,0,0,0,227,228,5,46,0,0,228,28,1,0,0,0,229,230,5,83,0,0,230,
231,5,116,0,0,231,232,5,114,0,0,232,233,5,105,0,0,233,234,5,110,0,0,234,
235,5,103,0,0,235,30,1,0,0,0,236,237,5,73,0,0,237,238,5,110,0,0,238,239,
5,116,0,0,239,240,5,101,0,0,240,241,5,103,0,0,241,242,5,101,0,0,242,243,
5,114,0,0,243,32,1,0,0,0,244,245,5,82,0,0,245,246,5,101,0,0,246,247,5,97,
0,0,247,248,5,108,0,0,248,34,1,0,0,0,249,250,5,65,0,0,250,251,5,114,0,0,
251,252,5,105,0,0,252,253,5,116,0,0,253,254,5,104,0,0,254,255,5,109,0,0,
255,256,5,101,0,0,256,257,5,116,0,0,257,258,5,105,0,0,258,259,5,99,0,0,259,
36,1,0,0,0,260,261,5,84,0,0,261,262,5,121,0,0,262,263,5,112,0,0,263,264,
5,101,0,0,264,38,1,0,0,0,265,266,5,103,0,0,266,267,5,114,0,0,267,268,5,111,
0,0,268,269,5,117,0,0,269,270,5,112,0,0,270,271,5,45,0,0,271,272,5,99,0,
0,272,273,5,97,0,0,273,274,5,114,0,0,274,275,5,100,0,0,275,276,5,105,0,0,
276,277,5,110,0,0,277,278,5,97,0,0,278,279,5,108,0,0,279,280,5,105,0,0,280,
281,5,116,0,0,281,282,5,121,0,0,282,40,1,0,0,0,283,284,5,102,0,0,284,285,
5,101,0,0,285,286,5,97,0,0,286,287,5,116,0,0,287,288,5,117,0,0,288,289,5,
114,0,0,289,290,5,101,0,0,290,291,5,45,0,0,291,292,5,99,0,0,292,293,5,97,
0,0,293,294,5,114,0,0,294,295,5,100,0,0,295,296,5,105,0,0,296,297,5,110,
0,0,297,298,5,97,0,0,298,299,5,108,0,0,299,300,5,105,0,0,300,301,5,116,0,
0,301,302,5,121,0,0,302,42,1,0,0,0,303,304,5,97,0,0,304,305,5,103,0,0,305,
306,5,103,0,0,306,307,5,114,0,0,307,308,5,101,0,0,308,309,5,103,0,0,309,
310,5,97,0,0,310,311,5,116,0,0,311,312,5,101,0,0,312,313,5,45,0,0,313,314,
5,102,0,0,314,315,5,117,0,0,315,316,5,110,0,0,316,317,5,99,0,0,317,318,5,
116,0,0,318,319,5,105,0,0,319,320,5,111,0,0,320,321,5,110,0,0,321,44,1,0,
0,0,322,323,5,115,0,0,323,324,5,116,0,0,324,325,5,114,0,0,325,326,5,105,
0,0,326,327,5,110,0,0,327,328,5,103,0,0,328,329,5,45,0,0,329,330,5,99,0,
0,330,331,5,111,0,0,331,332,5,110,0,0,332,333,5,115,0,0,333,334,5,116,0,
0,334,335,5,114,0,0,335,336,5,97,0,0,336,337,5,105,0,0,337,338,5,110,0,0,
338,339,5,116,0,0,339,340,5,115,0,0,340,46,1,0,0,0,341,342,5,40,0,0,342,
343,6,23,0,0,343,48,1,0,0,0,344,345,5,41,0,0,345,346,6,24,1,0,346,50,1,0,
0,0,347,348,5,91,0,0,348,349,6,25,2,0,349,52,1,0,0,0,350,351,5,93,0,0,351,
352,6,26,3,0,352,54,1,0,0,0,353,354,5,123,0,0,354,355,6,27,4,0,355,56,1,
0,0,0,356,357,5,125,0,0,357,358,6,28,5,0,358,58,1,0,0,0,359,360,5,47,0,0,
360,361,5,42,0,0,361,362,1,0,0,0,362,363,6,29,6,0,363,60,1,0,0,0,364,365,
5,42,0,0,365,366,5,47,0,0,366,367,1,0,0,0,367,368,6,30,7,0,368,62,1,0,0,
0,369,370,4,31,0,0,370,382,3,129,64,0,371,373,5,13,0,0,372,371,1,0,0,0,372,
373,1,0,0,0,373,374,1,0,0,0,374,377,5,10,0,0,375,377,5,13,0,0,376,372,1,
0,0,0,376,375,1,0,0,0,377,379,1,0,0,0,378,380,3,129,64,0,379,378,1,0,0,0,
379,380,1,0,0,0,380,382,1,0,0,0,381,369,1,0,0,0,381,376,1,0,0,0,382,383,
1,0,0,0,383,384,6,31,8,0,384,64,1,0,0,0,385,386,5,60,0,0,386,387,5,73,0,
0,387,388,5,78,0,0,388,389,5,68,0,0,389,390,5,69,0,0,390,391,5,78,0,0,391,
392,5,84,0,0,392,393,5,62,0,0,393,66,1,0,0,0,394,395,5,60,0,0,395,396,5,
68,0,0,396,397,5,69,0,0,397,398,5,68,0,0,398,399,5,69,0,0,399,400,5,78,0,
0,400,401,5,84,0,0,401,402,5,62,0,0,402,68,1,0,0,0,403,404,5,111,0,0,404,
405,5,114,0,0,405,70,1,0,0,0,406,407,5,97,0,0,407,408,5,108,0,0,408,409,
5,116,0,0,409,410,5,101,0,0,410,411,5,114,0,0,411,412,5,110,0,0,412,413,
5,97,0,0,413,414,5,116,0,0,414,415,5,105,0,0,415,416,5,118,0,0,416,417,5,
101,0,0,417,72,1,0,0,0,418,419,5,111,0,0,419,420,5,112,0,0,420,421,5,116,
0,0,421,422,5,105,0,0,422,423,5,111,0,0,423,424,5,110,0,0,424,425,5,97,0,
0,425,426,5,108,0,0,426,74,1,0,0,0,427,428,5,109,0,0,428,429,5,97,0,0,429,
430,5,110,0,0,430,431,5,100,0,0,431,432,5,97,0,0,432,433,5,116,0,0,433,434,
5,111,0,0,434,435,5,114,0,0,435,436,5,121,0,0,436,76,1,0,0,0,437,438,3,51,
25,0,438,446,3,111,55,0,439,440,5,46,0,0,440,441,5,46,0,0,441,444,1,0,0,
0,442,445,3,111,55,0,443,445,5,42,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,
447,1,0,0,0,446,439,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,53,
26,0,449,78,1,0,0,0,450,451,5,33,0,0,451,80,1,0,0,0,452,453,5,38,0,0,453,
82,1,0,0,0,454,455,5,124,0,0,455,84,1,0,0,0,456,457,5,60,0,0,457,458,5,61,
0,0,458,459,5,62,0,0,459,86,1,0,0,0,460,461,5,61,0,0,461,462,5,62,0,0,462,
88,1,0,0,0,463,464,5,61,0,0,464,465,5,61,0,0,465,90,1,0,0,0,466,467,5,60,
0,0,467,92,1,0,0,0,468,469,5,60,0,0,469,470,5,61,0,0,470,94,1,0,0,0,471,
472,5,62,0,0,472,96,1,0,0,0,473,474,5,62,0,0,474,475,5,61,0,0,475,98,1,0,
0,0,476,477,5,33,0,0,477,478,5,61,0,0,478,100,1,0,0,0,479,480,5,47,0,0,480,
102,1,0,0,0,481,482,5,42,0,0,482,104,1,0,0,0,483,484,5,43,0,0,484,106,1,
0,0,0,485,486,5,45,0,0,486,108,1,0,0,0,487,489,5,45,0,0,488,487,1,0,0,0,
488,489,1,0,0,0,489,493,1,0,0,0,490,492,7,0,0,0,491,490,1,0,0,0,492,495,
1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,493,1,0,0,0,
496,498,7,1,0,0,497,499,7,0,0,0,498,497,1,0,0,0,499,500,1,0,0,0,500,498,
1,0,0,0,500,501,1,0,0,0,501,110,1,0,0,0,502,514,5,48,0,0,503,505,5,45,0,
0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,510,7,2,0,0,507,509,
7,0,0,0,508,507,1,0,0,0,509,512,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,
511,514,1,0,0,0,512,510,1,0,0,0,513,502,1,0,0,0,513,504,1,0,0,0,514,112,
1,0,0,0,515,516,5,116,0,0,516,517,5,114,0,0,517,518,5,117,0,0,518,525,5,
101,0,0,519,520,5,102,0,0,520,521,5,97,0,0,521,522,5,108,0,0,522,523,5,115,
0,0,523,525,5,101,0,0,524,515,1,0,0,0,524,519,1,0,0,0,525,114,1,0,0,0,526,
527,5,66,0,0,527,528,5,111,0,0,528,529,5,111,0,0,529,530,5,108,0,0,530,531,
5,101,0,0,531,532,5,97,0,0,532,533,5,110,0,0,533,116,1,0,0,0,534,535,5,44,
0,0,535,118,1,0,0,0,536,538,5,34,0,0,537,539,8,3,0,0,538,537,1,0,0,0,539,
540,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,5,34,
0,0,543,120,1,0,0,0,544,560,7,4,0,0,545,559,7,5,0,0,546,547,5,194,0,0,547,
559,5,167,0,0,548,559,7,6,0,0,549,550,5,195,0,0,550,559,5,164,0,0,551,552,
5,195,0,0,552,559,5,188,0,0,553,554,5,195,0,0,554,559,5,182,0,0,555,556,
5,195,0,0,556,559,5,376,0,0,557,559,5,59,0,0,558,545,1,0,0,0,558,546,1,0,
0,0,558,548,1,0,0,0,558,549,1,0,0,0,558,551,1,0,0,0,558,553,1,0,0,0,558,
555,1,0,0,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,
0,0,561,122,1,0,0,0,562,560,1,0,0,0,563,565,5,39,0,0,564,566,8,7,0,0,565,
564,1,0,0,0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,569,1,0,
0,0,569,570,5,39,0,0,570,124,1,0,0,0,571,574,3,129,64,0,572,574,3,127,63,
0,573,571,1,0,0,0,573,572,1,0,0,0,574,575,1,0,0,0,575,576,6,62,9,0,576,126,
1,0,0,0,577,578,5,47,0,0,578,579,5,47,0,0,579,583,1,0,0,0,580,582,8,8,0,
0,581,580,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,596,
1,0,0,0,585,583,1,0,0,0,586,590,3,59,29,0,587,589,9,0,0,0,588,587,1,0,0,
0,589,592,1,0,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,590,
1,0,0,0,593,594,3,61,30,0,594,596,1,0,0,0,595,577,1,0,0,0,595,586,1,0,0,
0,596,128,1,0,0,0,597,599,7,9,0,0,598,597,1,0,0,0,599,600,1,0,0,0,600,598,
1,0,0,0,600,601,1,0,0,0,601,130,1,0,0,0,23,0,372,376,379,381,444,446,488,
493,500,504,510,513,524,540,558,560,567,573,583,590,595,600,10,1,23,0,1,
24,1,1,25,2,1,26,3,1,27,4,1,28,5,1,29,6,1,30,7,1,31,8,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class UVLJavaScriptLexer extends antlr4.Lexer {

    static grammarFileName = "UVLJavaScript.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'include'", "'namespace'", "'imports'", 
                         "'as'", "'features'", "'cardinality'", "'constraint'", 
                         "'constraints'", "'sum'", "'avg'", "'len'", "'floor'", 
                         "'ceil'", "'.'", "'String'", "'Integer'", "'Real'", 
                         "'Arithmetic'", "'Type'", "'group-cardinality'", 
                         "'feature-cardinality'", "'aggregate-function'", 
                         "'string-constraints'", "'('", "')'", "'['", "']'", 
                         "'{'", "'}'", "'/*'", "'*/'", null, "'<INDENT>'", 
                         "'<DEDENT>'", "'or'", "'alternative'", "'optional'", 
                         "'mandatory'", null, "'!'", "'&'", "'|'", "'<=>'", 
                         "'=>'", "'=='", "'<'", "'<='", "'>'", "'>='", "'!='", 
                         "'/'", "'*'", "'+'", "'-'", null, null, null, "'Boolean'", 
                         "','" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
                          "OPEN_BRACE", "CLOSE_BRACE", "OPEN_COMMENT", "CLOSE_COMMENT", 
                          "NEWLINE", "INDENT", "DEDENT", "ORGROUP", "ALTERNATIVE", 
                          "OPTIONAL", "MANDATORY", "CARDINALITY", "NOT", 
                          "AND", "OR", "EQUIVALENCE", "IMPLICATION", "EQUAL", 
                          "LOWER", "LOWER_EQUALS", "GREATER", "GREATER_EQUALS", 
                          "NOT_EQUALS", "DIV", "MUL", "ADD", "SUB", "FLOAT", 
                          "INTEGER", "BOOLEAN", "BOOLEAN_KEY", "COMMA", 
                          "ID_NOT_STRICT", "ID_STRICT", "STRING", "SKIP_" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", 
                      "CLOSE_BRACE", "OPEN_COMMENT", "CLOSE_COMMENT", "NEWLINE", 
                      "INDENT", "DEDENT", "ORGROUP", "ALTERNATIVE", "OPTIONAL", 
                      "MANDATORY", "CARDINALITY", "NOT", "AND", "OR", "EQUIVALENCE", 
                      "IMPLICATION", "EQUAL", "LOWER", "LOWER_EQUALS", "GREATER", 
                      "GREATER_EQUALS", "NOT_EQUALS", "DIV", "MUL", "ADD", 
                      "SUB", "FLOAT", "INTEGER", "BOOLEAN", "BOOLEAN_KEY", 
                      "COMMA", "ID_NOT_STRICT", "ID_STRICT", "STRING", "SKIP_", 
                      "COMMENT", "SPACES" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());

          // Una cola donde se empujan los tokens adicionales (ver la regla del lexer NEWLINE).
          let tokens = [];
          // La pila que lleva un registro del nivel de indentación.
          let indents = [];
          // La cantidad de paréntesis, corchetes y llaves abiertos.
          let opened = 0;
          // El token más recientemente producido.
          let lastToken = null;

    }
}

UVLJavaScriptLexer.EOF = antlr4.Token.EOF;
UVLJavaScriptLexer.T__0 = 1;
UVLJavaScriptLexer.T__1 = 2;
UVLJavaScriptLexer.T__2 = 3;
UVLJavaScriptLexer.T__3 = 4;
UVLJavaScriptLexer.T__4 = 5;
UVLJavaScriptLexer.T__5 = 6;
UVLJavaScriptLexer.T__6 = 7;
UVLJavaScriptLexer.T__7 = 8;
UVLJavaScriptLexer.T__8 = 9;
UVLJavaScriptLexer.T__9 = 10;
UVLJavaScriptLexer.T__10 = 11;
UVLJavaScriptLexer.T__11 = 12;
UVLJavaScriptLexer.T__12 = 13;
UVLJavaScriptLexer.T__13 = 14;
UVLJavaScriptLexer.T__14 = 15;
UVLJavaScriptLexer.T__15 = 16;
UVLJavaScriptLexer.T__16 = 17;
UVLJavaScriptLexer.T__17 = 18;
UVLJavaScriptLexer.T__18 = 19;
UVLJavaScriptLexer.T__19 = 20;
UVLJavaScriptLexer.T__20 = 21;
UVLJavaScriptLexer.T__21 = 22;
UVLJavaScriptLexer.T__22 = 23;
UVLJavaScriptLexer.OPEN_PAREN = 24;
UVLJavaScriptLexer.CLOSE_PAREN = 25;
UVLJavaScriptLexer.OPEN_BRACK = 26;
UVLJavaScriptLexer.CLOSE_BRACK = 27;
UVLJavaScriptLexer.OPEN_BRACE = 28;
UVLJavaScriptLexer.CLOSE_BRACE = 29;
UVLJavaScriptLexer.OPEN_COMMENT = 30;
UVLJavaScriptLexer.CLOSE_COMMENT = 31;
UVLJavaScriptLexer.NEWLINE = 32;
UVLJavaScriptLexer.INDENT = 33;
UVLJavaScriptLexer.DEDENT = 34;
UVLJavaScriptLexer.ORGROUP = 35;
UVLJavaScriptLexer.ALTERNATIVE = 36;
UVLJavaScriptLexer.OPTIONAL = 37;
UVLJavaScriptLexer.MANDATORY = 38;
UVLJavaScriptLexer.CARDINALITY = 39;
UVLJavaScriptLexer.NOT = 40;
UVLJavaScriptLexer.AND = 41;
UVLJavaScriptLexer.OR = 42;
UVLJavaScriptLexer.EQUIVALENCE = 43;
UVLJavaScriptLexer.IMPLICATION = 44;
UVLJavaScriptLexer.EQUAL = 45;
UVLJavaScriptLexer.LOWER = 46;
UVLJavaScriptLexer.LOWER_EQUALS = 47;
UVLJavaScriptLexer.GREATER = 48;
UVLJavaScriptLexer.GREATER_EQUALS = 49;
UVLJavaScriptLexer.NOT_EQUALS = 50;
UVLJavaScriptLexer.DIV = 51;
UVLJavaScriptLexer.MUL = 52;
UVLJavaScriptLexer.ADD = 53;
UVLJavaScriptLexer.SUB = 54;
UVLJavaScriptLexer.FLOAT = 55;
UVLJavaScriptLexer.INTEGER = 56;
UVLJavaScriptLexer.BOOLEAN = 57;
UVLJavaScriptLexer.BOOLEAN_KEY = 58;
UVLJavaScriptLexer.COMMA = 59;
UVLJavaScriptLexer.ID_NOT_STRICT = 60;
UVLJavaScriptLexer.ID_STRICT = 61;
UVLJavaScriptLexer.STRING = 62;
UVLJavaScriptLexer.SKIP_ = 63;

UVLJavaScriptLexer.prototype.action = function(localctx, ruleIndex, actionIndex) {
	switch (ruleIndex) {
	case 23:
		this.OPEN_PAREN_action(localctx, actionIndex);
		break;
	case 24:
		this.CLOSE_PAREN_action(localctx, actionIndex);
		break;
	case 25:
		this.OPEN_BRACK_action(localctx, actionIndex);
		break;
	case 26:
		this.CLOSE_BRACK_action(localctx, actionIndex);
		break;
	case 27:
		this.OPEN_BRACE_action(localctx, actionIndex);
		break;
	case 28:
		this.CLOSE_BRACE_action(localctx, actionIndex);
		break;
	case 29:
		this.OPEN_COMMENT_action(localctx, actionIndex);
		break;
	case 30:
		this.CLOSE_COMMENT_action(localctx, actionIndex);
		break;
	case 31:
		this.NEWLINE_action(localctx, actionIndex);
		break;
	default:
		throw "No registered action for:" + ruleIndex;
	}
};


UVLJavaScriptLexer.prototype.OPEN_PAREN_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 0:
		this.opened += 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.CLOSE_PAREN_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 1:
		this.opened -= 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.OPEN_BRACK_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 2:
		this.opened += 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.CLOSE_BRACK_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 3:
		this.opened -= 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.OPEN_BRACE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 4:
		this.opened += 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.CLOSE_BRACE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 5:
		this.opened -= 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.OPEN_COMMENT_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 6:
		this.opened += 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.CLOSE_COMMENT_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 7:
		this.opened -= 1;
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};

UVLJavaScriptLexer.prototype.NEWLINE_action = function(localctx , actionIndex) {
	switch (actionIndex) {
	case 8:
		this.handleNewline();
		break;
	default:
		throw "No registered action for:" + actionIndex;
	}
};
UVLJavaScriptLexer.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch (ruleIndex) {
		case 31:
			return this.NEWLINE_sempred(localctx, predIndex);
    	default:
    		throw "No registered predicate for:" + ruleIndex;
    }
};

UVLJavaScriptLexer.prototype.NEWLINE_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.atStartOfInput();
		default:
			throw "No predicate with index:" + predIndex;
	}
};




